#include <bits/stdc++.h>
using namespace std;

class p{
    public:
    bool operator()(pair<string,int >p1,pair<string,int >p2)
    {
        return p1.second<p2.second;
    }
};

int main()
{
    int number_of_transactions,friends;
    cin>>number_of_transactions>>friends;
    
    string x ,y;
    int amount;
    
    map<string,int> net;//stores net profit loss for each name /string
    while(number_of_transactions--)
    {
        cin>>x>>y>>amount;
        
        if(net.count(x)==0)
        {
            net[x]=0;
        }
        if(net.count(y)==0)
        {
            net[y]=0;
        }
        
        net[x]=net[x]-amount;
        net[y]=net[y]+amount;
        
    }
    
    multiset<pair<string,int>,p>m;
    
    //stores sorted net profit/loss for each string
    
    for(auto p:net)//for each pair in map named net net
    {
        string person =p.first;
        int amount=p.second;
        
        if(net[person]!=0)//if he has net zero then he need not be part of cash flows
        {
            m.insert(make_pair(person,amount));
        }
    }
    
    
    
    
    int count=0;
    while(!m.empty())
    {
        auto low =m.begin();
        auto high=prev(m.end());
        
        int debit=low->second;
        string debit_person=low->first;
        
        int credit=high->second;
        string credit_person=high->first;
        
        m.erase(low);
        m.erase(high);
        
        int amount_settled=min(-debit,credit);
        debit=debit+amount_settled;
        credit=credit-amount_settled;
        
        
        cout<<debit_person<<"  will pay "<<amount_settled<<" to "<<credit_person<<endl;
        if(debit!=0)
        {
            m.insert(make_pair(debit_person,debit));
        }
        
        if(credit!=0)
        {
            m.insert(make_pair(credit_person,credit));
        }
        
        count++;
    }
    cout<<count;
}
